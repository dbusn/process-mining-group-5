Note: Everything here starts counting from 1 instead of 0

I. All functions involved

Input: 
1. og_list: A list of integers
Output: 
1. cu_list: A list of cumulative sums for items in the input list
Function CumSum(lists)
1. lg <- Number of terms in og_list
2. For i = 1 to lg do:
3.  sum_term <- The sum of the first i terms in og_list
4.  cu_list[i] = sum_term
5. Return cu_list

Input: 
1.  df: A dataframe
Output: 
1.  df: The input dataframe with time_difference and position columns being added
Function time_difference(df)
1.  Compute time difference and assign it to time_difference column of df
2.  Initialize 1st row’s time difference as 0
3.  Count number of processes per case:concept:name
4.  Append all counts into length_per_case_List
5.  position_lst <- CumSum(length_per_case_List)
6.  For i in position_lst do
7.   Set ith row’s time difference as 0
8.  For x in length_per_case_List do
9.   For y = 1 to x do
10.   Append y into step_in_process
11. Assign step_in_process to position column of df
12. Return df

Input: 
1.  df: A dataframe
2.  mean_time_lst: A list with mean time per position computed for training dataset (Will be created before this function is applied)
Output: 
1.  df: The input dataframe with time_difference and position columns being added
Function apply_prediction(df)
1.  Assign step_in_process to position column of df
2.  Assign number of terms in mean_time_lst to nr_term
3.  For j in step_in_process do
4.   if j <= nr_term
5.    Then pred_time_lst[j] = mean_time_lst[j]
6.    Else pred_time_lst[j] = 0
7.  Assign pred_time_lst to baseline_predicted_time column of df
8.  Return df

II. The actual codes

1.  df_train <- time_difference(df_train)
2.  df_val <- time_difference(df_val)
3.  df_test <- time_difference(df_test)
4.  Assign step_in_process_train to position column of df_train
5.  Compute mean time difference per position
6.  Append all mean time differences into mean_time_lst
7.  For i in position_lst do
8.   pred_time_lst_train[i] = mean_time_lst[i]
9.  Assign pred_time_lst to baseline_predicted_time column of df_train
10. df_val <- apply_prediction(df_val)
11. df_test <- apply_prediction(df_test)
